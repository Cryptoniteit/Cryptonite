diff --git a/src/Makefile.am b/src/Makefile.am
index e6f6113..2ba179c 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -1,6 +1,6 @@
 include Makefile.include
 
-AM_CPPFLAGS += -I$(builddir) -fpermissive -ffloat-store -std=c++11 -D__STDC_LIMIT_MACROS
+AM_CPPFLAGS += -I$(builddir) -fpermissive -ffloat-store -std=c++11 -D__STDC_LIMIT_MACROS -D__USE_MINGW_ANSI_STDIO
 
 noinst_LIBRARIES = \
   libbitcoin_server.a \
diff --git a/src/main.cpp b/src/main.cpp
index 06de4d7..08968c8 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -928,21 +928,37 @@ void static PruneOrphanBlocks()
     mapOrphanBlocks.erase(hash);
 }
 
+//TODO: these functions only work on 64bit platforms!!!!
+void mpz_set_uii(mpz_t &mpz, uint64_t v){
+    mpz_set_ui(mpz,1);
+    mpz->_mp_d[0] = v;
+}
+
+uint64_t mpz_get_uii(mpz_t &mpz){
+    return mpz->_mp_d[0];
+}
+
 int64_t GetBlockValue(uint64_t coinbase, uint64_t nFees)
 {
-    mpz_t mcb,mquot;
+    mpz_t mcb,mquot,t;
     mpz_init(mcb);
     mpz_init(mquot);
+    mpz_init(t);
  
     //Setup so half of coinbase distributed in ~10 years
-    mpz_set_ui(mcb,coinbase);
-    mpz_mul_ui(mcb,mcb,24310*COIN);
-    mpz_div_ui(mquot,mcb,MAX_MONEY);
+    mpz_set_uii(mcb,coinbase);
+    mpz_set_uii(t,24310*COIN);
+    mpz_mul(mcb,mcb,t);
+    mpz_set_uii(t,MAX_MONEY);
+    mpz_div(mquot,mcb,t);
+
+    uint64_t value = mpz_get_uii(mquot);
 
-    uint64_t value = mpz_get_ui(mquot);
+    cout << __func__ << ": " << coinbase << ", " << nFees << ", " << value << ", " <<  (24310*COIN) << ", " <<  MAX_MONEY << ", " << sizeof(mp_limb_t) << "\n";
 
     mpz_clear(mcb);
     mpz_clear(mquot);
+    mpz_clear(t);
 
     return value + nFees;
 }
@@ -1029,19 +1045,22 @@ uint256 GetTargetWork(double nBits){
     assert(nBits>=1.0);
     nBits *= (1LL<<52); //Weird shift
    
-    mpz_t mbits,mtarget;
+    mpz_t mbits,mtarget,t;
     mpz_init(mbits);
     mpz_init(mtarget);
+    mpz_init(t);
 
     mpz_set_d(mbits,nBits);
     mpz_set_uint256(mtarget,target);
-    mpz_mul_ui(mtarget,mtarget,(1LL<<52));
+    mpz_set_uii(t,(1LL<<52));
+    mpz_mul(mtarget,mtarget,t);
     
     mpz_div(mtarget,mtarget,mbits);
 
     mpz_get_uint256(mtarget,target);
     mpz_clear(mbits);
     mpz_clear(mtarget);
+    mpz_clear(t);
 
     printf("HashCPOW: %s %f\n", target.GetHex().c_str(), nBits);
     return target;
